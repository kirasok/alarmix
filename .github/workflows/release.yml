name: On Tag
on:
  push:
    tags:
      - "*.*.*"
jobs:
  version:
    name: Get version
    runs-on: ubuntu-latest
    outputs:
      version-code: ${{ steps.version-generator.outputs.version-code }}
      version: ${{ steps.version-generator.outputs.version }}
    steps:
      - name: Set Build Number
        id: version-generator
        shell: bash
        run: |
          COMMITS=$(git rev-list --count HEAD)
          TAGS=$(git tag | grep -cv beta)
          VC=$((((COMMITS+TAGS) * 3) << 1))
          VERSION=$(git tag | tail -1)
          echo Number Commits "$COMMITS"
          echo Number Tags "$TAGS"
          echo Version Code "$VC"
          echo Version "$VERSION"
          echo "version-code=$VC" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    needs: version
    outputs:
      changelog: ${{steps.generate-notes.outputs.result}}
    steps:
      - name: Get Previous Release Tag
        uses: actions/github-script@v7
        id: latest-release-tag
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { data } = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
            })
            return data.tag_name
      - name: Get Generated Release Notes
        uses: actions/github-script@v7
        id: generate-notes
        with:
          github-token: ${{secrets.GITHUB_TOKEN  }}
          result-encoding: string
          script: |
            const { data } = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.version.outputs.version }}',
              target_commitish: 'main',
              previous_tag_name: '${{ steps.latest-release-tag.outputs.result }}',
            })
            return data.body.replaceAll('`', '\'').replaceAll('"', '\'')
  apk_build:
    name: APK build
    runs-on: ubuntu-latest
    needs: version
    outputs:
      app: ${{steps.upload-apk.outputs.artifact-id}}
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          distribution: "temurin"
          java-version: "17"
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - uses: timheuer/base64-to-file@v1.2.4
        name: Get keystore
        with:
          fileName: "release_keystore.keystore"
          fileDir: "."
          encodedString: ${{ secrets.ORIGINAL_KEYSTORE_FILE }}
      - uses: gradle/wrapper-validation-action@v2
        name: Validate Gradle Wrapper
      - name: Build Release
        env:
          KEYSTORE_PATH: release_keystore.keystore
          KEYSTORE_PASSWORD: ${{ secrets.ORIGINAL_KEYSTORE_FILE_PASSWORD }}
          KEYSTORE_ALIAS: ${{ secrets.ORIGINAL_KEYSTORE_ALIAS }}
          KEYSTORE_ALIAS_PASSWORD: ${{ secrets.ORIGINAL_KEYSTORE_FILE_PASSWORD }}
          VERSION_CODE: ${{ needs.version.outputs.version-code }}
        run: |
          ./gradlew -Pversion=${{needs.version.outputs.version}} :app:assembleRelease
      - name: Archive Build
        id: upload-apk
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./**/*.apk
  github_deploy:
    name: Deploy to Github release
    runs-on: ubuntu-latest
    needs: [version, changelog, apk_build]
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        id: download
        with:
          name: ${{ needs.apk_build.outputs.app }}
          merge-multiple: true
      - name: Create Github Release
        uses: softprops/action-gh-release@v2.0.4
        with:
          tag_name: ${{ needs.version.outputs.version }}
          body: ${{ needs.changelog.outputs.changelog }}
          files: |
            ${{steps.download.outputs.download-path}}/*
